@using DocIntel.Core.Authorization.Operations
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using DocIntel.Core.Helpers
@using DocIntel.Core.Importers
@using DocIntel.Core.Utils
@using Json.Schema
@using Json.Schema.Generation
@model Source
@using JsonSerializer = System.Text.Json.JsonSerializer

@{
    ViewData["Title"] = $"Edit Source '{Model.Title}'";

    var canEdit = (await AuthorizationService.AuthorizeAsync(User, null, SourceOperations.Edit)).Succeeded;
    var canDelete = (await AuthorizationService.AuthorizeAsync(User, null, SourceOperations.Delete)).Succeeded;
    var canSubscribe = (await AuthorizationService.AuthorizeAsync(User, null, SourceOperations.Subscribe)).Succeeded;
    var canMerge = (await AuthorizationService.AuthorizeAsync(User, null, SourceOperations.Merge)).Succeeded;
}

<form asp-action="Edit" method="post" enctype="multipart/form-data">
    <div class="subheader">
        <h1 class="subheader-title">
            <i class="fal fa-book subheader-icon"></i> @ViewData["Title"]
        </h1>
        <div class="btn-group mr-4">
            <button type="submit" class= "btn btn-pills btn-success btn-iconified waves-effect waves-themed">
                <i class="fal fa-save"></i> Save
            </button>
        </div>
        <div class="btn-group">
            @if (canMerge)
            {
                <a asp-action="Merge" asp-route-primarySourceId="@Model.SourceId"
                   class= "btn btn-pills btn-primary waves-effect waves-themed btn-iconified">
                    <i class="fal fa-code-merge"></i> Merge
                </a>
            }
            @if (canDelete)
            {
                <a asp-action="Delete" asp-route-id="@Model.SourceId" class= "btn btn-pills btn-primary btn-iconified">
                    <i class="fal fa-trash-alt"></i> Delete
                </a>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-12">

            @{
                var errors = ViewData.ModelState.SelectMany(x => x.Value.Errors);
            }
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger" role="alert">
                    <strong>Oh snap!</strong> Change a few things up and try submitting again.

                    <ul class="mb-0 mt-1">
                        @foreach (var error in ViewData.ModelState)
                        {
                            <li>Error in '@error.Key': @(string.Join(", ", error.Value.Errors.Select(_ => _.ErrorMessage)))</li>
                        }
                    </ul>
                </div>
            }

            <input type="hidden" asp-for="SourceId"/>
            @await Html.PartialAsync("_FormFields", Model, new ViewDataDictionary(ViewData))

            @await Html.PartialAsync("_MetaDataFields", Model, new ViewDataDictionary(ViewData))
            
            <div class="row">
                <div class="col-md-12">
                    <button type="submit" class= "btn btn-pills btn-success btn-iconified waves-effect waves-themed">
                        <i class="fal fa-save"></i> Save
                    </button>
                    <a asp-action="Details" asp-route-url="@Model.SourceId" class="ml-3 text-secondary">Cancel</a>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}