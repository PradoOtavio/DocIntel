@using DocIntel.Core.Authorization.Operations
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model DocIntel.WebApp.ViewModels.UserViewModel.ProfileViewModel
@inject IAppAuthorizationService _appAuthorizationService

@{
    ViewData["Title"] = Model.User.FriendlyName;
    ViewData["Category1"] = "Users";
    var canManageApiKey = await _appAuthorizationService.CanManageAPIKey(User, ViewBag.CurrentUser);
    var canEdit = await _appAuthorizationService.CanEditUser(User, ViewBag.CurrentUser);
    var canResetPassword = await _appAuthorizationService.CanResetPassword(User, ViewBag.CurrentUser);
}

<div class="subheader">
    <div class="d-flex flex-row flex-fill">
        <div class="mr-4">
        @if (string.IsNullOrEmpty(Model.User.ProfilePicture))
        {
            <img alt="" class="rounded-circle shadow-2 img-thumbnail" src="~/images/avatar-m.png"/>
        }
        else
        {
            <img alt="" class="rounded-circle shadow-2 img-thumbnail" style="max-width: 50px; height: auto;" src="@Url.Action("ProfilePicture", "Account", new { userName = Model.User.UserName })"/>
        }
        </div>
        <div>
            <h1 class="mb-0">@Model.User.FriendlyName</h1>
            @if (!string.IsNullOrEmpty(Model.User.Function))
            {
                <span class="text-muted mb-0">@Model.User.Function</span>
            }
        </div>
    </div>
    <div class="btn-group">
        @if (canEdit)
        {
            <a asp-action="Edit" asp-route-username="@Model.User.UserName" class= "btn btn-pills btn-primary btn-iconified">
                <i class="fal fa-edit"></i> Edit
            </a>
        }
        @if (canManageApiKey)
        {
            <a asp-action="ApiKeys" asp-route-username="@Model.User.UserName" class= "btn btn-pills btn-primary btn-iconified">
                <i class="fal fa-key"></i> Manage API Keys
            </a>
        }
        @if (canResetPassword)
        {
            <a asp-action="ResetPassword" asp-route-username="@Model.User.UserName" class= "btn btn-pills btn-primary btn-iconified">
                <i class="fal fa-key"></i> Reset Password
            </a>
        }
    </div>
</div>


<div class="row">

    <div>
        @*await Html.PartialAsync("UserInfoPanel", Model, new ViewDataDictionary(ViewData)) *@
        @*await Html.PartialAsync("UserGroups", Model, new ViewDataDictionary(ViewData)) *@
        @* @await Html.PartialAsync("AchievementsPanel", Model, new ViewDataDictionary(this.ViewData)) *@
    </div>

    <div class="col-12">
        
        <div id="panel-1" class="panel">
            <div class="panel-hdr">
                <h2>
                    Latest registered documents
                </h2>
            </div>
            <div class="panel-container show">
                <div class="panel-content p-0">
                    @if (Model.RegisteredDocuments?.Any() ?? false)
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var document in Model.RegisteredDocuments)
                            {
                                <li class="list-group-item py-3 px-3">
                                    @await Html.PartialAsync("../Document/_DocumentSummary", document, new ViewDataDictionary(ViewData))
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="text-center fs-xl m-4">
                            <i class="fal fa-telescope fa-4x opacity-30 color-fusion-30 mb-2"></i><br/>
                            The user did not yet register a document.
                        </div>
                    }
                </div>
            </div>
        </div>
        
    </div>

</div>