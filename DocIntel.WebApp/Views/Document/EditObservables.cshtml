@using DocIntel.Core.Authorization.Operations
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model DocIntel.WebApp.ViewModels.DocumentViewModel.DocumentObservablesViewModel
@{
    ViewData["Title"] = $"Edit {Model.Document.Title}";
    var canDownload = (await AuthorizationService.AuthorizeAsync(User, null, DocumentOperations.Download)).Succeeded;
    var canDelete = (await AuthorizationService.AuthorizeAsync(User, null, DocumentOperations.Delete)).Succeeded;
    var canEdit = (await AuthorizationService.AuthorizeAsync(User, null, DocumentOperations.Edit)).Succeeded;
    var canCreateTags = (await AuthorizationService.AuthorizeAsync(User, null, TagOperations.Create)).Succeeded;
    var canCreateSources = (await AuthorizationService.AuthorizeAsync(User, null, SourceOperations.Create)).Succeeded;
}

    <div class="subheader">
        <h1 class="subheader-title">
            <i class="fal fa-file-edit subheader-icon"></i> @Model.Document.Title
        </h1>
        <div>
            <div class="btn-group">
                <a asp-action="Edit" asp-route-id="@Model.Document.DocumentId"
                   class="btn btn-pills btn-primary waves-effect waves-themed btn-iconified" id="edit-btn">
                    <i class="fal fa-edit mr-1"></i> Back to edit
                </a>

                <a asp-action="Details" asp-route-url="@Model.Document.DocumentId"
                   class= "btn btn-pills btn-primary waves-effect waves-themed btn-iconified">
                    <i class="fal fa-eye"></i> Back to details
                </a>
            </div>
                    
        </div>
    </div>
    <div class="row">
        <div class="col-6">
        
            <form asp-action="AddObservable" method="post" enctype="multipart/form-data">
                <input type="hidden" name="DocumentId" value="@Model.Document.DocumentId" />
                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-prepend" style="width: 33%">
                            <select class="custom-select select2" name="obsType" data-placeholder="Choose...">
                                <option value=""></option>
                                @foreach (var t in Model.AvailableTypes.OrderBy(_ => _))
                                {
                                    <option value="@t">@t</option>
                                }
                            </select>
                        </div>
                        <input type="text" class="form-control" name="obsValue" />
                        <div class="input-group-append">
                            <button class="btn btn-primary waves-effect waves-themed btn-iconified" type="submit"
                                    action="@Url.Action("AddObservable")" method="post" enctype="multipart/form-data">
                                <i class="fal fa-plus"></i> Add
                            </button>
                        </div>
                    </div>
                </div>
            </form>
            
            <form asp-action="EditObservables" method="post" enctype="multipart/form-data">

            @{
                var viewDataDictionary = new ViewDataDictionary(ViewData);
                viewDataDictionary.Add("StartIndex", 0);
            }
            
            @{
                var groupedObservables = Model.Observables.GroupBy(_ => _.Form)
                    .OrderBy(_ => _.Key);
            }
            
            <div class="alert alert-secondary" role="alert">
                <p class="mb-1">There are @Model.Observables.Count() related structured data:</p>
                <ul class="m-0 pl-3">
                    @foreach (var group in groupedObservables)
                    {
                        <li class="mb-1">
                            <span class="mr-2"><code>@group.Key</code></span> (@group.Count())
                        </li>
                    }
                </ul>
            </div>

            @{
                int i = 0;
            }
            @foreach (var group in groupedObservables)
            {
                var uuid = Guid.NewGuid().ToString();
                <div class="panel">
                    <div class="panel-hdr">
                        <h2>
                            <span class="mr-2"><code>@group.Key</code></span> (@group.Count())
                        </h2>
                        
                        <div class="panel-toolbar">
                            <div class="btn-group btn-group-xs">
                                <a class= "btn btn-outline-secondary waves-effect waves-themed toggleAll" data-table-target="observable-editor-@uuid" href="#">
                                    Keep all
                                </a>
                                <a class= "btn  btn-outline-secondary waves-effect waves-themed toggleNone" data-table-target="observable-editor-@uuid" href="#">
                                    Remove all
                                </a>
                            </div>
                        </div>
                        <div class="panel-toolbar ml-2">
                            <button class="btn btn-panel waves-effect waves-themed" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"></button>
                        </div>
                    </div>
                    <div class="panel-container show">
                        <div class="panel-content p-0">
                            <table class="table table-striped table-hover" id="observable-editor-@uuid" style="table-layout: fixed">
                                <thead class="thead-light">
                                <tr>
                                    <th scope="col" style="width: 25%">Status</th>
                                    <th scope="col" style="width: 75%">Value</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var item in group.OrderBy(_ => _.Repr ?? _.Valu))
                                {
                                    <tr>
                                        <td style="width: 25%">
                                            <input type="hidden" value="@item.Iden" name="observables[]" />
                                            <select class="status" style="width: 100%" name="status[]">
                                                <option value="keep" selected>Keep</option>
                                                <option value="remove">Remove</option>
                                                <option value="remove-ignore">Remove and ignore</option>
                                            </select>
                                        </td>
                                        <td style="width: 75%">
                                            <p class="m-0 mb-2" style="width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap">
                                                @if (!string.IsNullOrEmpty(item.Repr as string))
                                                {
                                                    <text>@item.Repr</text>
                                                }
                                                else
                                                {
                                                    <text>@item.Valu</text>
                                                }
                                            </p>
                                            @if (item.Tags.Any())
                                            {
                                                var prefixTree = new Synsharp.Telepath.TagTree(item.Tags.Keys.ToArray());
                                                <p class="m-0">
                                                    @foreach (var t in prefixTree)
                                                    {
                                                        <span class="@(t.StartsWith("_di")?"badge-primary":"badge-secondary") badge">@t</span>
                                                    }
                                                </p>
                                            }
                                        </td>
                                    </tr>
                                    i++;
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            
            <input asp-for="Document.DocumentId" name="DocumentId" class="form-control" type="hidden"/>

            <div class="row">
                <div class="col-md-12">
                    @Html.AntiForgeryToken()

                    <button type="submit" 
                            id="register-btn"
                            class= "btn btn-pills btn-success waves-effect waves-themed btn-iconified mr-4">
                        <i class="fal fa-pencil-alt"></i> Save
                    </button>

                </div>
            </div>
            </form>
        </div>
        <div class="col-6">
            <div id="panel-file" class="panel">
                <div class="panel-hdr">
                    <h2>
                        Document
                        <span class="fw-300">
                            <i>Preview</i>
                        </span>
                    </h2>
                    <div class="panel-toolbar pr-3 align-self-end">
                        <ul class="nav nav-tabs border-bottom-0">
                            @{ var first = true; }
                            @foreach (var f in Model.Document.Files)
                            {
                                if ((f.MimeType == "application/pdf") | f.MimeType.StartsWith("text/"))
                                {
                                    <li class="nav-item">
                                        <a class="nav-link @(first ? "active" : "")" data-toggle="tab" href="#tab-@f.FileId">@f.Title</a>
                                    </li>
                                }
                                first = false;
                            }
                        </ul>
                    </div>
                    <div class="panel-toolbar">
                        <button class= "btn btn-pills btn-panel waves-effect waves-themed" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"></button>
                    </div>
                </div>
                <div class="panel-container show">
                    <div class="panel-content p-0">
                        <div class="tab-content">
                            <!-- PDF Pane  -->
                            @{ first = true; }
                            @foreach (var f in Model.Document.Files)
                            {
                                if ((f.MimeType == "application/pdf") | f.MimeType.StartsWith("text/"))
                                {
                                    <div class="tab-pane fade @(first ? "show active" : "")" id="tab-@f.FileId">
                                        <iframe src="@Url.Action("Download", "File", new {id = f.FileId})"
                                                style="width: 100%;">
                                        </iframe>
                                    </div>
                                }
                                first = false;
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

@section Scripts {

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script type="text/javascript">
        $(document).ready(function() {
            $(".toggleAll").click(function() {
                $("#" + $(this).data("table-target") + " select").val("keep");
                return false;
            });
            $(".toggleNone").click(function() {
                $("#" + $(this).data("table-target") + " select").val("remove");
                return false;
            });    
        });
    </script>
}