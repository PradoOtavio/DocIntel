@using DocIntel.Core.Authorization.Operations
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Document

@{
    var canDiscard = (await AuthorizationService.AuthorizeAsync(User, null, DocumentOperations.Discard)).Succeeded;
}

<tr>
    @if (canDiscard)
    {
        <td class="pr-2">
            <a asp-action="Discard" asp-controller="Document" asp-route-id="@Model.DocumentId" class="text-muted" alt="Discard">
                <i class="fas fa-trash"></i>
            </a>
        </td>
    }
    <td class="pr-2">
        @if (Model.Status == DocumentStatus.Submitted)
        {
            <span class="badge badge-warning">Pending</span>
        }
        else if (Model.Status == DocumentStatus.Analyzed)
        {
            <span class="badge badge-success">Ready</span>
        }
    </td>
    <td>
        <div class="col">
            <div class="row mb-1">
                @if (Model.Status == DocumentStatus.Submitted)
                {
                    <span class="name">
                        @Model.Title
                    </span>
                }
                else if (Model.Status == DocumentStatus.Analyzed)
                {
                    <a asp-action="Create" asp-controller="Document" asp-route-id="@Model.DocumentId" class="name">
                        @Model.Title
                    </a>
                }
            </div>
            <div class="row mb-1">
                @if (Model.Source != null)
                {
                    <text>
                        <span class="mr-1">
                            by <a asp-controller="Source" asp-action="Details" asp-route-url="@Model.Source.SourceId">@Model.Source.Title</a>
                        </span>
                        <span class="mr-1">-</span>
                    </text>
                }
                @Html.Timeago(Model.DocumentDate)
            </div>
                @if (Model.DocumentTags.Any())
                {
                    <div class="row mb-1">
                    <ul class="list-style-none m-0 p-0">
                        @foreach (var g in Model.DocumentTags.Select(dt => dt.Tag).GroupBy(t => t.Facet).OrderBy(t => t.Key.Title))
                        {
                            <li class="m-0 mb-1 pl-4">
                                <strong class="mr-2 fw-500 fs-xs" style="margin-left: -1.5rem !important">@g.Key.Title</strong>
                                @foreach (var tag in g)
                                {
                                    <a class="badge badge-pill @tag.BackgroundColor"
                                       asp-controller="Tag"
                                       asp-action="Details" asp-route-label="@tag.TagId">
                                        @tag.Label
                                    </a>
                                }
                            </li>
                        }
                    </ul>
                    </div>
                }
        </div>
    </td>
    <td class="col-2 link-hidden-hover">
        <div class="d-flex flex-row  mt-1 mb-1">
            <span class="mr-2">
                @if (string.IsNullOrEmpty(Model.RegisteredBy.ProfilePicture))
                {
                    <img alt="" class="profile-image rounded-circle" style="width: 1.5rem; height: auto" src="~/images/avatar-m.png"/>
                }
                else
                {
                    <img alt="" class="profile-image rounded-circle" style="width: 1.5rem; height: auto" src="@Url.Action("ProfilePicture", "Account", new {userName = Model.RegisteredBy.UserName})"/>
                }
            </span>
            <div>
                <div class="text-truncate text-truncate-lg text-muted">@Model.RegisteredBy.FriendlyName
                <a class="ml-1 fs-xs text-muted link-hidden" asp-action="Pending" asp-route-username="@Model.RegisteredBy.UserName">
                    <i class="far fa-search-plus"></i>
                </a></div>
            </div>
        </div>
    </td>
</tr>